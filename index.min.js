'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactCaptchaGenerator = function (_Component) {
    _inherits(ReactCaptchaGenerator, _Component);

    function ReactCaptchaGenerator(props) {
        _classCallCheck(this, ReactCaptchaGenerator);

        return _possibleConstructorReturn(this, (ReactCaptchaGenerator.__proto__ || Object.getPrototypeOf(ReactCaptchaGenerator)).call(this, props));
    }

    _createClass(ReactCaptchaGenerator, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.setState({
                height: this.props.height ? this.props.height : 100,
                width: this.props.width ? this.props.width : 100,
                textColor: this.props.textColor ? this.props.textColor : false,
                fontFamily: this.props.fontFamily ? this.props.fontFamily : 'Verdana',
                fontSize: this.props.fontSize ? this.props.fontSize : '30',
                paddingLeft: this.props.paddingLeft ? this.props.paddingLeft : '20',
                paddingTop: this.props.paddingTop ? this.props.paddingTop : '60',
                lenght: this.props.lenght ? this.props.lenght : '5',
                background: this.props.background ? this.props.background : 'none'
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var text = [];
            var originText = [];
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < this.state.lenght; i++) {
                var char = possible.charAt(Math.floor(Math.random() * possible.length));
                text.push('<text \n                    font-family="' + this.state.fontFamily + '" \n                    font-size="' + this.state.fontSize + '" \n                    x="' + this.state.paddingLeft * i + '" \n                    y="' + this.state.paddingTop + '"\n                    fill="' + (this.props.textColor ? this.props.textColor : "#" + ((1 << 24) * Math.random() | 0).toString(16)) + '"\n                    transform="rotate(' + (Math.random() * (5 - 0) + 0) + ')"\n                >' + char + '</text>');
                originText.push(char);
            }
            this.props.result(originText.join(''));
            return _react2.default.createElement('img', {
                style: { background: this.state.background },
                src: 'data:image/svg+xml;base64,' + btoa('<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'height="' + this.state.height + '" ' + 'width="' + this.state.width + '">' + text.join() + '</svg>'),
                alt: '' });
        }
    }]);

    return ReactCaptchaGenerator;
}(_react.Component);

exports.default = ReactCaptchaGenerator;